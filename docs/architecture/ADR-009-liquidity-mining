# ADR 009: Liquidity Mining

## Changelog

- May 1 2022: Initial Draft (@toteki)

## Status

Proposed

## Abstract

Umee wishes to add support for liquidity mining incentives; i.e. additional rewards on top of the normal `x/leverage` lending APY for supplying base assets.

For example, a user might "lock" for 14 days some of their `u/uatom` collateral held in the leverage module, earning an additional 12% APY of the collateral's value, received as `uumee` tokens.

Locked tokens will be unavailable for `x/leverage` withdrawal until unbonded, but still able to be liquidated. There will be 3 locking tiers, differing in unbonding duration.

Incentive programs will be created by governance proposals, get funded with tokens, then (from `StartDate` to `EndDate`) distribute those tokens to lenders of based on the lenders' locked value. APY will vary as fixed reward amounts are divided amongst all participating lenders.

## Context

- TODO

### Backwards Compatibility

This will introduce a new module as well as new behavior in the `x/leverage` module. The changes will take place during the mainnet `calypso` upgrade.

## Decision

The general approach will be to create an `x/incentive` module with a small surface of interaction with `x/leverage`.

The incentive module will support message types which allow users to lock and begin unbonding uTokens, similar to staking. 

Locked funds must be collateral-enabled uTokens. Locked funds will not leave their original place in the leverage module account. Locking will prevent withdrawal and collateral-disabling (but not liquidation) of the locked uTokens until they are successfully unbonded.

There will be three tiers of locking, differing in their unbonding durations, which may receive differing incentives. The tiers will be of fixed durations (`1 | 7 | 14 days`) and will exist independent of active incentive programs.

The intended structure of what is described as a single incentive program is as follows:
- A fixed sum of a single token denomination
- To be distributed evenly over time between a start date and an end date
- To all addresses which have locked a specified uToken denomination
- Proportional to their total value locked but not currently unbonding
- Then weighted by locking tier
- As calculated at the moment of distribution, either continuously of epoched

All parameters mentioned above (dates, amounts, and denominations) must be set using a governance proposal, which creates the incentive program unless impossible under our chosen implementation.

No message types to alter or halt incentive programs once voted on are planned, and any number of incentive programs should be capable of being active simultaneously regardless of parameters, including overlapping dates and denominations.

Incentives funding will be stored in the `x/liquidity` module account.

Implementation details will determine the exact method of funding incentive programs and distributing rewards, with a priority being the avoidance of iteration over lenders, especially passively.

## Detailed Design

The `x/incentive` module will have a fixed number (3) of lock tiers, which will be the same for all asset classes at any given time.  Typical tiers might be 1,7, and 14 days.

The module will govern the lock durations of the tiers (in seconds) using parameters:
```
    LockDurationShort uint64
    LockDurationMedium uint64
    LockDurationLong uint64
```

### Locking and Unlocking

Users must be able to lock `uTokens` they have enabled as collateral in `x/leverage` by sumbitting new `x/incentive` message types.

Locking of funds is independent of active incentive programs, and can even be done in their absence.

```go
type MsgLockAssets struct {
  Lender sdk.AccAddress
  Amount sdk.Coin
  Tier   uint32
}

type MsgUnlockAssets struct {
  Lender sdk.AccAddress
  Amount sdk.Coin
  Tier   uint32
}
```

Amounts are `uToken` balances, exact integers which will not experience rounding errors.

On receiving a `MsgLock`, the module must perform the following steps:

- Validate tier and uToken amount
- Verify lender has sufficient unlocked uTokens
- Distribute the lender's current `x/incentive` rewards for the selected denom and tier, if any
- Record the new locked utoken amount for the selected denom and tier

See later sections for reward mechanics - it is mathematically necessary to claim rewards when updating amount.

On receiving a `MsgUnlock`, the module must perform the following steps:

- Validate tier and uToken amount
- Verify lender has sufficient locked uTokens of the selected tier that are not currently unbonding
- Distribute the lender's current `x/incentive` rewards for the selected denom and tier, if any
- Start an unbonding for the lender in question

### Incentive Programs

The `x/incentive` module exists to incentivize users to lock collateral assets at the various tiers.

The basic unit of incentivization is the `IncentiveProgram`, which, continuously between a start time and end time, distributes a fixed amount of a given asset type across all holders of a given denom of locked `uToken` collateral, weighted by amount held and locking tier.

```go
type IncentiveProgram struct {
  LockedDenom      string
  RewardDenom      string
  TotalRewards     sdk.Int
  StartTime        uint64
  EndTime          uint64
  MiddleTierWeight sdk.Dec
  ShortTierWeight  sdk.Dec
}
```

Start and end times are unix times measured in seconds.

TotalIncentive is the total amount of rewards to be distributed as a result of the incentive program. It can contain any reward denomination, allowing for external incentive programs.

Valid tier weights range from 0 to 1, and `LongTierWeight` is defined as always `1.0`.

For example, a `MiddleTierWeight` of `0.8` means that collateral locked at the middle duration tier accrues 80% of the rewards that the same amount would accrue at the longest tier.

### TODO

- TODO: Incentive program gov proposal and permissionless funding process, including funding in-progress programs. Avoids "returning of funds for rejected proposals" problem.
- TODO: Reward distribution math and iteration considerations, with references
- TODO: Unbonding mechanics including liquidation interruption
- TODO: leverage interactions

### State

Locked `uToken` amounts for individual users will be stored in state:

```
lockedAssetPrefix | lenderAddr | lengthPrefixed(denom) | tier => sdk.Int
```

TODO: Claimed reward storage
TODO: Unbonding struct, and queues too.
TODO: Incentive programs active
TODO: Module rewards tracking (exchange rates)

## Alternative Approaches

> This section contains information around alternative options that are considered
> before making a decision. It should contain a explanation on why the alternative
> approach(es) were not chosen.

- TODO: Epoch vs continuous, liquid vs exchanged rewards, automatic vs claimed distribution
- TODO: Funding before or after gov proposal, permissioned be permissionless

## Consequences

> This section describes the consequences, after applying the decision. All
> consequences should be summarized here, not just the "positive" ones.

### Positive

### Negative

### Neutral

## References

> Are there any relevant PR comments, issues that led up to this, or articles
> referenced for why we made the given design choice? If so link them here!

- {reference link}
